<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Webhook URLs</title>
  <link rel="icon" href="/favicon.svg?v=2" type="image/svg+xml" sizes="any" />
  
  <!-- Fallback CSS for when CDN resources are blocked -->
  <link rel="stylesheet" href="/fallback.css" />
  <link rel="stylesheet" href="/icons.css" />
  
  <!-- CDN resources with error handling -->
  <script>
    // Load TailwindCSS with fallback
    const tailwindScript = document.createElement('script');
    tailwindScript.src = 'https://cdn.tailwindcss.com';
    tailwindScript.onerror = function() {
      console.log('TailwindCSS CDN blocked, using fallback styles');
      document.body.classList.add('cdn-fallback');
    };
    tailwindScript.onload = function() {
      // Configure Tailwind only if it loaded successfully
      if (typeof tailwind !== 'undefined') {
        tailwind.config = {
          theme: {
            extend: {
              keyframes: {
                fadein: { '0%': {opacity:0, transform:'translateY(6px)'}, '100%': {opacity:1, transform:'translateY(0)'} },
                scalein: { '0%': {opacity:0, transform:'scale(.96)'}, '100%': {opacity:1, transform:'scale(1)'} },
              },
              animation: { fadein:'fadein .25s ease-out', scalein:'scalein .2s ease-out' },
              boxShadow: { soft: '0 2px 20px -4px rgba(2,6,23,.08)' }
            }
          }
        };
      }
    };
    document.head.appendChild(tailwindScript);
    
    // Load FontAwesome with fallback
    const fontAwesome = document.createElement('link');
    fontAwesome.rel = 'stylesheet';
    fontAwesome.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css';
    fontAwesome.onerror = function() {
      console.log('FontAwesome CDN blocked, using fallback icons');
    };
    document.head.appendChild(fontAwesome);
  </script>
  <style>
    .glass{backdrop-filter:blur(10px);background:rgba(255,255,255,.75)}
    .field{display:flex;align-items:center;gap:.5rem}
    .field i{color:rgb(100 116 139)}
  </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-slate-50 via-white to-emerald-50 text-slate-900">
  <!-- Skip link for accessibility -->
  <a href="#main-content" class="skip-link">Skip to main content</a>
  
  <section class="border-b border-slate-200/70 bg-white/70 glass">
    <div class="max-w-6xl mx-auto px-4 py-10">
      <div class="flex items-start gap-4">
        <div class="size-12 rounded-2xl bg-emerald-600 text-white grid place-items-center shadow-sm shrink-0">
          <i class="fa-solid fa-link text-lg"></i>
        </div>
        <div class="flex-1">
          <h1 class="text-3xl md:text-4xl font-bold tracking-tight">Webhook URLs</h1>
          <p class="mt-2 text-slate-600 text-base md:text-lg">Create endpoints, choose status & content-type, optionally forward requests, and inspect captures.</p>
          <div class="mt-4 flex flex-wrap items-center gap-3 text-sm text-slate-600">
            <span class="inline-flex items-center gap-2 px-2.5 py-1.5 rounded-lg bg-emerald-50 text-emerald-700 border border-emerald-100"><i class="fa-solid fa-bolt"></i> Fast mock responses</span>
            <span class="inline-flex items-center gap-2 px-2.5 py-1.5 rounded-lg bg-sky-50 text-sky-700 border border-sky-100"><i class="fa-solid fa-shuffle"></i> Forwarding supported</span>
            <span class="inline-flex items-center gap-2 px-2.5 py-1.5 rounded-lg bg-violet-50 text-violet-700 border border-violet-100"><i class="fa-regular fa-eye"></i> Request viewer</span>
          </div>
        </div>
      </div>
    </div>
  </section>

  <main id="main-content" class="max-w-6xl mx-auto px-4 py-8" role="main">
    <!-- ADD URL • COMPOSER STYLE -->
    <div class="rounded-2xl border border-slate-200 shadow-soft bg-white/80 glass">
      <!-- Header -->
      <div class="px-5 py-4 border-b border-slate-200 flex flex-wrap items-center gap-3">
        <div class="flex items-center gap-2 text-slate-800 font-semibold">
          <span class="inline-grid place-items-center size-7 rounded-lg bg-emerald-600 text-white text-sm">+</span>
          Create Endpoint
        </div>
        <div class="ml-auto text-xs text-slate-500 flex items-center gap-2">
          <i class="fa-regular fa-circle-question"></i> Mock instantly • Forward optionally
        </div>
      </div>

      <form method="post" action="/webhooks" class="p-5 space-y-6" id="create_form" novalidate>
        <!-- Label Input -->
        <div class="grid grid-cols-1 lg:grid-cols-12 gap-6">
          <div class="lg:col-span-7">
            <div class="form-group">
              <label for="label_input" class="form-label">
                <span class="flex items-center gap-2">
                  <i class="fa-solid fa-tag text-emerald-600" aria-hidden="true"></i>
                  Webhook Label (optional)
                </span>
              </label>
              <div class="relative">
                <input 
                  id="label_input" 
                  name="label" 
                  type="text" 
                  placeholder="e.g. Payment API, User Registration" 
                  class="form-input pl-4 pr-4"
                  pattern="[a-zA-Z0-9 _-]*"
                  maxlength="50"
                  aria-describedby="label-help"
                />
                <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                  <div class="text-slate-400" aria-hidden="true">
                    <i class="fa-solid fa-tag text-sm"></i>
                  </div>
                </div>
              </div>
              <p id="label-help" class="mt-1 text-xs text-slate-500">
                Optional. Only letters, numbers, spaces, underscores and hyphens allowed. Max 50 characters.
              </p>
            </div>
          </div>
          
          <div class="lg:col-span-5">
            <div class="bg-gradient-to-br from-blue-50 to-indigo-50 border border-blue-200 rounded-xl p-4">
              <div class="flex items-start gap-2 mb-3">
                <div class="text-blue-600 mt-0.5" aria-hidden="true">
                  <i class="fa-solid fa-lightbulb"></i>
                </div>
                <div>
                  <h3 class="font-semibold text-blue-900 text-sm mb-1">URL Parameter Guide</h3>
                  <div class="space-y-2 text-xs text-blue-800">
                    <div class="flex items-start gap-2">
                      <code class="font-mono bg-blue-100 px-1.5 py-0.5 rounded text-blue-900">res:200json</code>
                      <span class="flex-1">Response with status 200 and JSON</span>
                    </div>
                    <div class="flex items-start gap-2">
                      <code class="font-mono bg-blue-100 px-1.5 py-0.5 rounded text-blue-900">res:404html</code>
                      <span class="flex-1">Response with status 404 and HTML</span>
                    </div>
                    <div class="flex items-start gap-2">
                      <code class="font-mono bg-blue-100 px-1.5 py-0.5 rounded text-blue-900">fwd:https://api.com</code>
                      <span class="flex-1">Forward request to URL</span>
                    </div>
                    <div class="pt-1 border-t border-blue-200">
                      <span class="text-blue-700 font-medium">Example:</span>
                      <code class="block mt-1 font-mono bg-blue-100 px-1.5 py-1 rounded text-blue-900 text-xs break-all">
                        /webhook/abc123/res:200json/fwd:https://api.example.com
                      </code>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Submit Section -->
        <div class="flex flex-col sm:flex-row sm:items-center gap-4 pt-2 border-t border-slate-100">
          <button 
            type="submit"
            class="btn btn-primary inline-flex items-center justify-center gap-2 px-6 py-3 text-base font-semibold shadow-lg hover:shadow-xl focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2"
            aria-describedby="submit-help"
          >
            <i class="fa-solid fa-plus" aria-hidden="true"></i> 
            Create Webhook URL
          </button>
          <div class="flex-1">
            <p id="submit-help" class="text-sm text-slate-600">
              You'll get a unique URL that supports parameters for custom responses and request forwarding.
            </p>
            <div class="flex items-center gap-1 mt-1 text-xs text-slate-500">
              <i class="fa-solid fa-shield-halved text-emerald-600" aria-hidden="true"></i>
              <span>Secure • No signup required • Works instantly</span>
            </div>
          </div>
        </div>
      </form>
    </div>

    <!-- LIST HEADER -->
    <div class="mt-8 mb-6">
      <div class="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
        <div>
          <h2 class="text-xl font-semibold text-slate-900 flex items-center gap-2">
            <i class="fa-solid fa-list text-emerald-600" aria-hidden="true"></i>
            Your Webhook Endpoints
          </h2>
          <p class="text-sm text-slate-600 mt-1">
            Manage and monitor your active webhook URLs
          </p>
        </div>
        <div class="flex items-center gap-4">
          <div class="flex items-center gap-2 text-sm text-slate-500 bg-blue-50 px-3 py-2 rounded-lg border border-blue-200">
            <i class="fa-regular fa-lightbulb text-blue-600" aria-hidden="true"></i> 
            <span class="text-blue-800">Tip: Click any URL to view its requests</span>
          </div>
        </div>
      </div>
    </div>

    <!-- ENDPOINTS LIST -->
    <% if (webhooks.length === 0) { %>
      <div class="mt-8 text-center py-16">
        <div class="max-w-md mx-auto">
          <div class="w-16 h-16 mx-auto mb-4 rounded-full bg-gradient-to-br from-slate-100 to-slate-200 flex items-center justify-center">
            <i class="fa-solid fa-link text-2xl text-slate-400" aria-hidden="true"></i>
          </div>
          <h3 class="text-lg font-semibold text-slate-900 mb-2">No webhooks yet</h3>
          <p class="text-slate-600 mb-6">
            Create your first webhook endpoint above to start receiving and testing HTTP requests.
          </p>
          <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 text-sm">
            <div class="flex flex-col items-center p-3 rounded-lg bg-emerald-50 border border-emerald-100">
              <div class="text-emerald-600 mb-1" aria-hidden="true">
                <i class="fa-solid fa-bolt"></i>
              </div>
              <span class="font-medium text-emerald-800">Mock Responses</span>
              <span class="text-xs text-emerald-600 text-center">Return custom HTTP status codes and content types</span>
            </div>
            <div class="flex flex-col items-center p-3 rounded-lg bg-sky-50 border border-sky-100">
              <div class="text-sky-600 mb-1" aria-hidden="true">
                <i class="fa-solid fa-shuffle"></i>
              </div>
              <span class="font-medium text-sky-800">Request Forwarding</span>
              <span class="text-xs text-sky-600 text-center">Proxy requests to your real APIs for testing</span>
            </div>
            <div class="flex flex-col items-center p-3 rounded-lg bg-violet-50 border border-violet-100">
              <div class="text-violet-600 mb-1" aria-hidden="true">
                <i class="fa-regular fa-eye"></i>
              </div>
              <span class="font-medium text-violet-800">Request Inspection</span>
              <span class="text-xs text-violet-600 text-center">View headers, body, and response details</span>
            </div>
          </div>
        </div>
      </div>
    <% } else { %>
      <div class="mt-4 grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
        <% webhooks.forEach(webhook => { %>
          <article class="grid grid-rows-[auto,1fr,auto] h-full rounded-2xl border border-slate-200 bg-white shadow-soft overflow-hidden">
            <!-- Header -->
            <div class="px-4 pt-4 pb-3 border-b border-slate-100 bg-gradient-to-br from-slate-50 to-white">
              <div class="flex items-start gap-2">
                <div class="size-9 rounded-xl bg-slate-900 text-white grid place-items-center shrink-0">
                  <i class="fa-solid fa-link text-sm"></i>
                </div>
                <div class="min-w-0">
                  <a href="/request/<%= encodeURIComponent(webhook.id) %>" class="font-mono text-sky-700 hover:underline decoration-2 underline-offset-2 break-all">
                    <span id="u-<%= webhook.id %>" data-href-rel="webhook/<%= encodeURIComponent(webhook.id) %>">webhook/<%= webhook.id %></span>
                  </a>
                  <div class="mt-1 text-xs text-slate-600 flex flex-wrap items-center gap-2">
                    <span>ID: <code class="font-mono"><%= webhook.id %></code></span>
                    <span>·</span>
                    <span class="inline-flex items-center gap-1 px-1.5 py-0.5 rounded bg-emerald-50 text-emerald-700 border border-emerald-100">
                      <i class="fa-solid fa-tag text-[10px]"></i><%= webhook.label %>
                    </span>
                  </div>
                </div>
                <button type="button" class="ml-auto text-slate-500 hover:text-slate-700 size-8 grid place-items-center rounded-md hover:bg-slate-200/60"
                        data-copy="u-<%= webhook.id %>" title="Copy full URL" aria-label="Copy URL">
                  <i class="fa-regular fa-copy"></i>
                </button>
              </div>
            </div>

            <!-- Body -->
            <div class="px-4 py-4">
              <div class="grid grid-cols-2 gap-4 items-start">
                <div class="space-y-1">
                  <div class="text-xs text-slate-500">Requests</div>
                  <div class="h-9 flex items-center font-mono text-slate-900"><%= webhook.request_count %></div>
                </div>
                <div class="space-y-1">
                  <div class="text-xs text-slate-500">Created</div>
                  <div class="h-9 flex items-center text-slate-600 text-sm js-time" data-iso="<%= webhook.created_at %>"><%= webhook.created_at %></div>
                </div>
                <div class="col-span-2 space-y-1">
                  <div class="text-xs text-slate-500">URL Parameters</div>
                  <div class="min-h-12 text-xs text-slate-600">
                    <div class="space-y-1">
                      <div><code class="bg-slate-100 px-1 rounded font-mono">res:200json</code> - JSON response with status 200</div>
                      <div><code class="bg-slate-100 px-1 rounded font-mono">res:404html</code> - HTML response with status 404</div>
                      <div><code class="bg-slate-100 px-1 rounded font-mono">fwd:https://site.com</code> - Forward to URL</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Footer -->
            <div class="px-4 pb-4 pt-2 border-t border-slate-100 bg-slate-50/60">
              <div class="flex items-center gap-2">
                <a href="/request/<%= encodeURIComponent(webhook.id) %>" class="inline-flex items-center gap-2 bg-slate-900 hover:bg-slate-800 text-white font-medium px-3 py-2 rounded-lg shadow-sm transition">
                  <i class="fa-regular fa-eye"></i> View
                </a>
                <button type="button" class="inline-flex items-center gap-2 bg-sky-600 hover:bg-sky-500 text-white font-medium px-3 py-2 rounded-lg shadow-sm transition" data-configure-url="u-<%= webhook.id %>">
                  <i class="fa-solid fa-wand-magic-sparkles"></i> Configure URL
                </button>
                <button data-open-delete="<%= webhook.id %>" data-webhook-label="<%= webhook.label %>" type="button"
                        class="inline-flex items-center gap-2 bg-rose-600 hover:bg-rose-500 text-white font-semibold px-3 py-2 rounded-lg shadow-sm transition">
                  <i class="fa-regular fa-trash-can"></i> Delete
                </button>
                <span class="ml-auto text-[11px] text-slate-500 hidden md:inline-flex items-center gap-1">
                  Press <span class="px-1 border rounded bg-white border-slate-300">Esc</span> to close dialog
                </span>
              </div>
            </div>
          </article>
        <% }); %>
      </div>
    <% } %>
  </main>

  <!-- Modal -->
  <div id="modal_overlay" class="hidden fixed inset-0 bg-slate-900/40 backdrop-blur-sm opacity-0 transition-opacity duration-200" aria-hidden="true"></div>
  <div id="modal_panel" role="dialog" aria-modal="true" aria-labelledby="modal_title" aria-describedby="modal_desc" class="hidden fixed inset-0 grid place-items-center z-50">
    <div id="modal_inner" class="w-full max-w-md mx-4 translate-y-4 opacity-0">
      <div class="rounded-2xl bg-white shadow-xl border border-slate-200 p-5 animate-scalein">
        <div class="flex items-start gap-3">
          <div class="size-10 rounded-xl bg-rose-100 text-rose-700 grid place-items-center" aria-hidden="true">
            <i class="fa-solid fa-triangle-exclamation"></i>
          </div>
          <div class="flex-1">
            <h2 id="modal_title" class="text-lg font-semibold">Delete webhook?</h2>
            <p id="modal_desc" class="text-sm text-slate-600 mt-1">
              This removes the endpoint and <strong>all logs</strong>. Cannot be undone.
            </p>
            <div class="mt-3 text-xs text-slate-500">
              <div>Label: <span id="modal_label" class="font-medium text-slate-700">—</span></div>
              <div>ID: <code id="modal_id" class="font-mono">—</code></div>
            </div>
          </div>
        </div>
        <div class="mt-5 flex items-center justify-end gap-2">
          <button 
            id="btn_cancel" 
            type="button"
            class="btn btn-secondary px-4 py-2 rounded-lg border border-slate-300 bg-white hover:bg-slate-50 text-slate-700 transition focus:ring-2 focus:ring-slate-500 focus:ring-offset-2"
            aria-describedby="modal_desc"
          >
            Cancel
          </button>
          <button 
            id="btn_confirm" 
            type="button"
            class="btn btn-danger inline-flex items-center gap-2 px-4 py-2 rounded-lg bg-rose-600 hover:bg-rose-500 text-white shadow-sm transition focus:ring-2 focus:ring-rose-500 focus:ring-offset-2"
            aria-describedby="modal_desc"
          >
            <i class="fa-regular fa-trash-can" aria-hidden="true"></i> Delete
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Toasts -->
  <div id="toast_region" class="fixed bottom-6 left-1/2 -translate-x-1/2 z-50 space-y-2"></div>

  <script>
    // Form validation and enhancement
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('create_form');
      const labelInput = document.getElementById('label_input');
      const submitBtn = form.querySelector('button[type="submit"]');
      
      // Real-time validation for label input
      if (labelInput) {
        labelInput.addEventListener('input', function(e) {
          const value = e.target.value;
          const isValid = /^[a-zA-Z0-9 _-]*$/.test(value);
          
          // Visual feedback
          const inputContainer = e.target.closest('.relative') || e.target.parentElement;
          if (!isValid && value.length > 0) {
            inputContainer.classList.add('border-red-300', 'bg-red-50');
            inputContainer.classList.remove('border-slate-300');
            // Show error message
            let errorMsg = inputContainer.parentElement.querySelector('.error-message');
            if (!errorMsg) {
              errorMsg = document.createElement('p');
              errorMsg.className = 'error-message mt-1 text-xs text-red-600';
              errorMsg.textContent = 'Only letters, numbers, spaces, underscores and hyphens are allowed.';
              inputContainer.parentElement.appendChild(errorMsg);
            }
          } else {
            inputContainer.classList.remove('border-red-300', 'bg-red-50');
            inputContainer.classList.add('border-slate-300');
            // Remove error message
            const errorMsg = inputContainer.parentElement.querySelector('.error-message');
            if (errorMsg) errorMsg.remove();
          }
        });
      }
      
      // Form submission enhancement
      if (form && submitBtn) {
        form.addEventListener('submit', function(e) {
          // Disable submit button to prevent double submission
          submitBtn.disabled = true;
          submitBtn.innerHTML = '<i class="fa-solid fa-spinner icon-spin" aria-hidden="true"></i> Creating...';
          
          // Re-enable after a delay in case of error
          setTimeout(() => {
            if (submitBtn.disabled) {
              submitBtn.disabled = false;
              submitBtn.innerHTML = '<i class="fa-solid fa-plus" aria-hidden="true"></i> Create Webhook URL';
            }
          }, 10000);
        });
      }
      
      // Auto-focus on label input for better UX
      if (labelInput) {
        labelInput.focus();
      }
      
      // Add loading state management
      window.addEventListener('beforeunload', function() {
        if (submitBtn && submitBtn.disabled) {
          // Form is being submitted, don't show confirmation
          return;
        }
      });
    });

    function showToast(msg){
      const t = document.createElement('div');
      t.className = 'toast';
      t.textContent = msg;
      document.getElementById('toast_region').appendChild(t);
      setTimeout(()=>{ t.classList.add('opacity-0','transition','duration-300'); }, 1400);
      setTimeout(()=>{ t.remove(); }, 1800);
    }

    const modal = {
      overlay: null,
      panel: null,
      inner: null,
      idEl: null,
      labelEl: null,
      confirmBtn: null,
      cancelBtn: null,
      prevFocus: null,
      currentId: null,
      focusableElements: null,
      
      open(id, label) {
        this.currentId = id;
        this.idEl.textContent = id;
        this.labelEl.textContent = label || '—';
        this.prevFocus = document.activeElement;
        
        // Trap focus within modal
        this._setupFocusTrap();
        
        // Make elements display (remove display:none) before animating
        this.overlay.classList.remove('hidden');
        this.panel.classList.remove('hidden');
        this.overlay.setAttribute('aria-hidden', 'false');
        
        // Disable scrolling on body
        document.body.style.overflow = 'hidden';
        
        // Ensure start state for transition
        this.overlay.classList.remove('opacity-100');
        this.overlay.classList.add('opacity-0');
        this.inner.classList.add('translate-y-4', 'opacity-0');
        
        // Next frame, run show transitions
        requestAnimationFrame(() => {
          this.overlay.classList.add('opacity-100');
          this.overlay.classList.remove('opacity-0');
          this.inner.classList.remove('translate-y-4', 'opacity-0');
        });
        
        // Focus the confirm button for accessibility
        setTimeout(() => this.confirmBtn.focus(), 100);
        
        // Add event listeners
        document.addEventListener('keydown', this._handleKeydown.bind(this));
        this.overlay.addEventListener('click', this._handleOverlayClick.bind(this));
      },
      
      close() {
        // Start hide animation
        this.inner.classList.add('translate-y-4', 'opacity-0', 'transition', 'duration-150');
        this.overlay.classList.remove('opacity-100');
        this.overlay.classList.add('opacity-0');
        
        // Re-enable scrolling
        document.body.style.overflow = '';
        
        // After transition end, hide from layout (display:none)
        setTimeout(() => {
          this.overlay.classList.add('hidden');
          this.panel.classList.add('hidden');
          this.overlay.setAttribute('aria-hidden', 'true');
          this.inner.classList.remove('transition', 'duration-150');
        }, 150);
        
        // Clean up event listeners
        document.removeEventListener('keydown', this._handleKeydown.bind(this));
        this.overlay.removeEventListener('click', this._handleOverlayClick.bind(this));
        
        this.currentId = null;
        
        // Restore focus
        if (this.prevFocus && this.prevFocus.focus) {
          this.prevFocus.focus();
        }
      },
      
      _setupFocusTrap() {
        this.focusableElements = this.panel.querySelectorAll(
          'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        );
      },
      
      _handleKeydown(e) {
        if (e.key === 'Escape') {
          e.preventDefault();
          this.close();
          return;
        }
        
        if (e.key === 'Tab') {
          this._handleTabNavigation(e);
        }
      },
      
      _handleTabNavigation(e) {
        if (!this.focusableElements.length) return;
        
        const firstElement = this.focusableElements[0];
        const lastElement = this.focusableElements[this.focusableElements.length - 1];
        
        if (e.shiftKey) {
          // Shift + Tab
          if (document.activeElement === firstElement) {
            e.preventDefault();
            lastElement.focus();
          }
        } else {
          // Tab
          if (document.activeElement === lastElement) {
            e.preventDefault();
            firstElement.focus();
          }
        }
      },
      
      _handleOverlayClick(e) {
        if (e.target === this.overlay) {
          this.close();
        }
      }
    };

    document.addEventListener('DOMContentLoaded', function(){
      // Modal refs
      modal.overlay = document.getElementById('modal_overlay');
      modal.panel   = document.getElementById('modal_panel');
      modal.inner   = document.getElementById('modal_inner');
      modal.idEl    = document.getElementById('modal_id');
      modal.labelEl = document.getElementById('modal_label');
      modal.confirmBtn = document.getElementById('btn_confirm');
      modal.cancelBtn  = document.getElementById('btn_cancel');

      // Full origin URLs
      const origin = window.location.origin.replace(/\/$/, '');
      document.querySelectorAll('[data-href-rel]').forEach(el=>{
        el.textContent = origin + '/' + el.getAttribute('data-href-rel').replace(/^\//,'');
      });

      // Copy buttons for webhook URLs
      document.querySelectorAll('[data-copy]').forEach(btn=>{
        btn.addEventListener('click', ()=>{
          const target = document.getElementById(btn.getAttribute('data-copy'));
          if(target){ navigator.clipboard.writeText(target.textContent||'').then(()=>showToast('Copied URL to clipboard')); }
        });
      });

      // Configure URL buttons
      document.addEventListener('click', function(e){
        const btn = e.target.closest('[data-configure-url]');
        if(!btn) return;
        const targetId = btn.getAttribute('data-configure-url');
        const el = document.getElementById(targetId);
        if(!el) return;
        const base = el.textContent || '';
        if(window.WebhookComposer && typeof window.WebhookComposer.open==='function'){
          window.WebhookComposer.open(base);
        }
      });

      // Modal wiring for deletion
      document.querySelectorAll('[data-open-delete]').forEach(btn=>{
        btn.addEventListener('click', ()=> modal.open(btn.getAttribute('data-open-delete'), btn.getAttribute('data-webhook-label')||''));
      });
      modal.overlay.addEventListener('click', ()=>modal.close());
      modal.cancelBtn.addEventListener('click', ()=>modal.close());
      modal.confirmBtn.addEventListener('click', async function(){
        if(!modal.currentId) return;
        try{
          const r = await fetch(`/webhooks/${modal.currentId}`, { method:'DELETE', headers:{'Content-Type':'application/json'} });
          if(r.ok){ showToast('Webhook deleted'); setTimeout(()=>location.reload(), 350); }
          else { showToast('Error deleting webhook'); }
        }catch{ showToast('Error deleting webhook'); }
        finally{ modal.close(); }
      });

      // Form submit validation: simple label validation
      const createForm = document.getElementById('create_form');
      if(createForm){
        createForm.addEventListener('submit', function(e){
          try{
            // Ensure label contains only a single value (split on comma)
            const labelEl = document.getElementById('label_input');
            if(labelEl){
              const raw = labelEl.value || '';
              if(raw.includes(',')){
                // keep the first non-empty segment
                const first = raw.split(',').map(s=>s.trim()).filter(Boolean)[0] || '';
                labelEl.value = first;
                showToast('Multiple labels not allowed — keeping first label');
              }
            }
          }catch(_){ }
        });
      }
      
      // Restrict label input to alphanumeric, space, underscore and hyphen
      const labelInput = document.getElementById('label_input');
      if(labelInput){
        const allowedRe = /^[A-Za-z0-9 _-]$/;
        labelInput.addEventListener('keydown', function(e){
          // Allow control keys: backspace, delete, arrows, tab, enter
          if(e.ctrlKey || e.metaKey || e.key.length > 1) return;
          if(!allowedRe.test(e.key)){
            e.preventDefault();
            showToast('Only letters, numbers, space, underscore and hyphen allowed');
          }
        });
        // Strip invalid chars on paste and insert only cleaned text (first valid segment)
        labelInput.addEventListener('paste', function(e){
          const paste = (e.clipboardData || window.clipboardData).getData('text') || '';
          if(!paste) return;
          e.preventDefault();
          // Keep only allowed characters and collapse multiple invalid separators
          const cleaned = paste.split('').map(ch => allowedRe.test(ch) ? ch : '').join('');
          // insert cleaned text at cursor
          const start = labelInput.selectionStart || 0;
          const end = labelInput.selectionEnd || 0;
          const before = labelInput.value.slice(0, start);
          const after = labelInput.value.slice(end);
          labelInput.value = before + cleaned + after;
          showToast('Pasted text cleaned to allowed characters');
        });
      }

      // Locale-format all timestamps
      document.querySelectorAll('.js-time').forEach(span=>{
        const iso = span.getAttribute('data-iso');
        if(iso){
          try{ span.textContent = new Date(iso).toLocaleDateString(); }catch(_){}
        }
      });
    });
  </script>
  <script src="/composer.js"></script>
</body>
</html>
