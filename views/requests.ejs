<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Requests for <%= webhookId %></title>
  <link rel="icon" href="/favicon.svg?v=2" type="image/svg+xml" sizes="any" />
  <link rel="stylesheet" href="/css/app.css" />
  <link rel="stylesheet" href="/css/icons.css" />
  <script>
    // Global state for SPA-like functionality
    let currentRequests = <%- JSON.stringify(requests) %>;
    let currentSelectedRid = '<%= selectedRid %>';
    let currentPage = 1;
    const REQUESTS_PER_PAGE = 20;
    let isLoading = false;

    function showToast(msg){
      const t = document.createElement('div');
      t.className = 'fixed bottom-6 left-1/2 -translate-x-1/2 bg-slate-900 text-white px-4 py-2 rounded-lg shadow-lg animate-fadein z-50';
      t.textContent = msg;
      document.body.appendChild(t);
      setTimeout(()=>{ t.classList.add('opacity-0','transition','duration-300'); }, 1200);
      setTimeout(()=>{ t.remove(); }, 1600);
    }

    function showLoading() {
      const indicator = document.getElementById('loadingIndicator');
      if (indicator) {
        indicator.classList.add('show');
        isLoading = true;
      }
    }

    function hideLoading() {
      const indicator = document.getElementById('loadingIndicator');
      if (indicator) {
        indicator.classList.remove('show');
        isLoading = false;
      }
    }

    // Enhanced search that includes request body content
    function performSearch(query) {
      const items = Array.from(document.querySelectorAll('[data-req-item]'));
      const q = query.toLowerCase().trim();
      let visible = 0;
      
      items.forEach(item => {
        if (!q) {
          item.classList.remove('hidden');
          visible++;
          return;
        }

        const rid = item.getAttribute('data-rid');
        const request = currentRequests.find(r => r.rid === rid);
        
        if (request) {
          // Search in multiple fields including body content
          const searchFields = [
            request.method || '',
            request.path || request.full_url || '',
            String(request.response_status || ''),
            request.body || '',
            JSON.stringify(request.headers || {}),
            JSON.stringify(request.query || {}),
            request.user_agent || ''
          ].join(' ').toLowerCase();
          
          const match = searchFields.includes(q);
          item.classList.toggle('hidden', !match);
          if (match) visible++;
        }
      });
      
      document.getElementById('reqCount').textContent = String(visible);
    }

    // SPA-style request selection without page refresh
    function selectRequest(rid, updateHistory = true) {
      if (isLoading) return;
      
      showLoading();
      currentSelectedRid = rid;
      
      // Update visual selection
      document.querySelectorAll('[data-req-item]').forEach(item => {
        item.classList.remove('active');
        if (item.getAttribute('data-rid') === rid) {
          item.classList.add('active');
          item.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
        }
      });
      
      // Find the request data
      const request = currentRequests.find(r => r.rid === rid);
      if (request) {
        renderRequestDetails(request);
        
        // Update URL without page refresh
        if (updateHistory) {
          const newUrl = `/request/<%= webhookId %>?rid=${encodeURIComponent(rid)}`;
          history.pushState({ rid }, '', newUrl);
        }
      }
      
      hideLoading();
    }

    // Render request details in the main area
    function renderRequestDetails(request) {
      const mainSection = document.querySelector('section');
      if (!mainSection) return;

      const prettyHeaders = JSON.stringify(request.headers || {}, null, 2);
      const prettyQuery = JSON.stringify(request.query || {}, null, 2);
      let prettyBody = request.body || '';
      try {
        const decoded = JSON.parse(request.body);
        prettyBody = JSON.stringify(decoded, null, 2);
      } catch (e) { /* leave as-is */ }
      
      const respStatus = request.response_status || 200;
      const requestTime = new Date(request.time).toISOString();
      const ridSafe = (request.rid || 'req').replace(/[^a-zA-Z0-9_-]/g,'');

      // Create the forwarding info section
      let forwardingInfo = '';
      if (request.proxied_status || request.proxy_error) {
        forwardingInfo = `
          <div class="mt-4 p-4 bg-slate-50 rounded-lg">
            <h3 class="font-semibold text-slate-700 mb-2">
              <i class="fa-solid fa-arrow-turn-up"></i> Forwarding Response
            </h3>
            ${request.proxied_status ? `
              <div class="flex items-center gap-2 text-sm">
                <span class="chip">Status: ${request.proxied_status}</span>
                <span class="text-emerald-600"><i class="fa-solid fa-check"></i> Successfully forwarded</span>
              </div>
            ` : ''}
            ${request.proxy_error ? `
              <div class="text-sm text-red-600">
                <i class="fa-solid fa-times"></i> Error: ${request.proxy_error}
              </div>
            ` : ''}
          </div>
        `;
      }

      mainSection.innerHTML = `
        <div class="flex items-start justify-between gap-3">
          <h2 class="text-xl font-semibold">Request Details</h2>
          <div class="flex items-center gap-2">
            <div class="inline-flex items-center gap-1 text-xs text-slate-500">
              <i class="fa-solid fa-clock"></i>
              <span class="js-time" data-iso="${requestTime}">${new Date(requestTime).toLocaleString()}</span>
            </div>
            <div class="chip">
              <i class="fa-solid fa-signal"></i> ${respStatus}
            </div>
          </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 mt-4">
          <div class="space-y-4">
            <div>
              <h3 class="font-semibold text-slate-700 mb-2">Basic Info</h3>
              <div class="bg-slate-50 p-3 rounded-lg space-y-2 text-sm">
                <div class="flex justify-between">
                  <span class="text-slate-600">Method:</span>
                  <span class="chip font-mono">${request.method}</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-slate-600">Path:</span>
                  <code class="text-slate-800 break-all">${request.path || request.full_url}</code>
                </div>
                <div class="flex justify-between">
                  <span class="text-slate-600">IP:</span>
                  <code class="text-slate-800">${request.ip}</code>
                </div>
                <div class="flex justify-between">
                  <span class="text-slate-600">User Agent:</span>
                  <span class="text-slate-600 text-xs break-all">${request.user_agent || 'N/A'}</span>
                </div>
              </div>
            </div>

            <div>
              <div class="flex items-center justify-between mb-2">
                <h3 class="font-semibold text-slate-700">Headers</h3>
                <button class="text-xs text-slate-500 hover:text-slate-700" data-copy-target="headers-${ridSafe}">
                  <i class="fa-solid fa-copy"></i> Copy
                </button>
              </div>
              <div class="codecard">
                <pre id="headers-${ridSafe}">${prettyHeaders}</pre>
              </div>
            </div>
          </div>

          <div class="space-y-4">
            <div>
              <div class="flex items-center justify-between mb-2">
                <h3 class="font-semibold text-slate-700">Query Parameters</h3>
                <button class="text-xs text-slate-500 hover:text-slate-700" data-copy-target="query-${ridSafe}">
                  <i class="fa-solid fa-copy"></i> Copy
                </button>
              </div>
              <div class="codecard">
                <pre id="query-${ridSafe}">${prettyQuery}</pre>
              </div>
            </div>

            <div>
              <div class="flex items-center justify-between mb-2">
                <h3 class="font-semibold text-slate-700">Request Body</h3>
                <button class="text-xs text-slate-500 hover:text-slate-700" data-copy-target="body-${ridSafe}">
                  <i class="fa-solid fa-copy"></i> Copy
                </button>
              </div>
              <div class="codecard">
                <pre id="body-${ridSafe}">${prettyBody}</pre>
              </div>
            </div>
          </div>
        </div>

        ${forwardingInfo}
      `;

      // Re-bind copy buttons
      bindCopyButtons();
    }

    // Bind copy button functionality
    function bindCopyButtons() {
      document.querySelectorAll('[data-copy-target]').forEach(btn => {
        btn.addEventListener('click', () => {
          const pre = document.getElementById(btn.getAttribute('data-copy-target'));
          if (!pre) return;
          const text = pre.textContent || pre.innerText || '';
          navigator.clipboard.writeText(text).then(() => showToast('Copied'));
        });
      });
    }

    // Handle browser back/forward
    window.addEventListener('popstate', function(event) {
      if (event.state && event.state.rid) {
        selectRequest(event.state.rid, false);
      }
    });

    document.addEventListener('DOMContentLoaded', function(){
      // Render full origin URL for the webhook
      const origin = window.location.origin.replace(/\/$/, '');
      const el = document.getElementById('fullWebhook');
      if (el && el.dataset.rel) el.textContent = origin + '/' + el.dataset.rel.replace(/^\//,'');

      document.getElementById('copyWebhook')?.addEventListener('click', function(){
        if (el) navigator.clipboard.writeText(el.textContent).then(()=> showToast('Copied URL'));
      });

      // Enhanced filter functionality
      const filter = document.getElementById('reqFilter');
      filter?.addEventListener('input', () => {
        performSearch(filter.value);
      });

      // Bind request item clicks for SPA navigation
      document.querySelectorAll('[data-req-item]').forEach(item => {
        item.addEventListener('click', function(e) {
          e.preventDefault();
          const rid = this.getAttribute('data-rid');
          if (rid) {
            selectRequest(rid);
          }
        });
      });

      // Initial request selection and active highlighting
      if (currentSelectedRid) {
        selectRequest(currentSelectedRid, false);
      }

      // Ensure active item is visible
      const active = document.querySelector(`[data-req-item][data-rid="${currentSelectedRid}"]`);
      if (active) {
        active.classList.add('active');
        active.scrollIntoView({ block: 'nearest' });
      }

      // Bind copy buttons
      bindCopyButtons();
    });
  </script>
</head>
<body class="min-h-screen bg-gradient-to-br from-slate-50 via-white to-emerald-50 text-slate-900">
  <header class="glass border-b border-slate-200/70">
    <div class="max-w-6xl mx-auto px-4 py-6 flex items-center justify-between">
      <div class="flex items-center gap-3">
        <div class="size-10 rounded-xl bg-slate-900 text-white grid place-items-center"><i class="fa-solid fa-list"></i></div>
        <div>
          <h1 class="text-xl md:text-2xl font-semibold">Requests</h1>
          <div class="text-slate-600 text-sm">
            for <code class="font-mono text-slate-800"><%= webhookId %></code>
            <span id="live_indicator" title="Live updates" class="inline-flex items-center gap-2 ml-3 text-xs text-emerald-600">
              <span id="live_dot" class="w-2 h-2 rounded-full bg-emerald-500 animate-pulse"></span> Live
            </span>
          </div>
        </div>
      </div>
      <a class="inline-flex items-center gap-2 bg-sky-600 hover:bg-sky-500 text-white font-medium px-3 py-2 rounded-lg shadow-sm transition" href="/">
        <i class="fa-solid fa-arrow-left"></i> Back to Index
      </a>
    </div>
  </header>

  <main class="max-w-6xl mx-auto px-4 py-6">
    <div class="grid grid-cols-1 md:grid-cols-[340px,1fr] gap-4">
      <!-- Sidebar -->
      <aside class="md:sticky md:top-6 bg-white border border-slate-200 rounded-2xl overflow-hidden shadow-soft h-fit">
        <div class="px-4 py-4 border-b border-slate-200">
          <div class="text-sm text-slate-600">Webhook</div>
          <div class="mt-1 font-mono text-sky-700 break-all flex items-center gap-2">
            <i class="fa-solid fa-link"></i>
            <a href="/webhook/<%= encodeURIComponent(webhookId) %>" class="hover:underline" title="Open webhook">
              <span id="fullWebhook" data-rel="webhook/<%= encodeURIComponent(webhookId) %>">webhook/<%= webhookId %></span>
            </a>
            <button id="copyWebhook" type="button" class="text-slate-500 hover:text-slate-700 size-7 grid place-items-center rounded-md hover:bg-slate-100" title="Copy full URL">
              <i class="fa-regular fa-copy"></i>
            </button>
          </div>

          <% if (webhook && webhook.label) { %>
            <div class="mt-2 text-xs text-slate-600">
              Label: <span class="inline-flex items-center gap-1 px-1.5 py-0.5 rounded bg-emerald-50 text-emerald-700 border border-emerald-100 font-medium"><%= webhook.label %></span>
            </div>
          <% } %>

          <% if (typeof requests !== 'undefined' && requests.length > 0 && requests[0] && requests[0].webhook_id) { %>
            <% // Try to get tags from the first request's stored webhook data if available (best-effort) %>
          <% } %>

          <!-- Filter -->
          <div class="mt-3">
            <label class="text-xs text-slate-600 mb-1 block">Filter</label>
            <div class="flex bg-white border border-slate-300 rounded-lg overflow-hidden">
              <input id="reqFilter" type="text" placeholder="search method, status, path, body content…"
                     class="w-full bg-transparent px-3 py-2 text-sm focus:outline-none" />
              <div class="px-3 grid place-items-center text-slate-500 border-l border-slate-300">
                <i class="fa-solid fa-magnifying-glass"></i>
              </div>
            </div>
            <div class="mt-1 text-xs text-slate-500">
              <span id="reqCount"><%= requests.length %></span> request<%= requests.length===1?'':'s' %>
            </div>
          </div>
        </div>

        <div class="max-h-[70vh] overflow-auto divide-y divide-slate-100">
          <% if (requests.length === 0) { %>
            <div class="px-4 py-6 text-slate-600">No requests yet.</div>
          <% } else { %>
            <% requests.forEach(request => { 
              const active = (request.rid === selectedRid);
              const requestTime = new Date(request.time).toISOString();
            %>
              <a data-req-item
                 data-rid="<%= request.rid %>"
                 data-path="<%= (request.path || request.full_url || '') %>"
                 data-method="<%= request.method %>"
                 data-status="<%= request.response_status || '' %>"
                 class="request-item block px-4 py-3 hover:bg-slate-50 transition <%= active ? 'active' : '' %>" 
                 href="/request/<%= encodeURIComponent(webhookId) %>?rid=<%= encodeURIComponent(request.rid) %>">
                <div class="flex items-center gap-2 text-sm">
                  <span class="chip font-mono text-xs"><%= request.method %></span>
                  <span class="text-slate-500 font-mono text-xs js-time" data-iso="<%= requestTime %>"><%= requestTime %></span>
                  <% if (request.response_status) { %>
                    <span class="ml-auto inline-flex items-center gap-1 text-xs text-slate-500">
                      <i class="fa-solid fa-signal"></i><%= request.response_status %>
                    </span>
                  <% } %>
                </div>
                <div class="font-mono text-slate-600 text-xs mt-1 break-all"><%= request.path || request.full_url %></div>
              </a>
            <% }); %>
          <% } %>
        </div>
      </aside>

      <!-- Main -->
      <section class="bg-white border border-slate-200 rounded-2xl p-5 shadow-soft">
        <% if (!selected) { %>
          <div class="border border-slate-200 rounded-xl p-4 bg-slate-50 text-slate-600">Select a request from the left to view details.</div>
        <% } else { %>
          <%
            const prettyHeaders = JSON.stringify(selected.headers || {}, null, 2);
            const prettyQuery = JSON.stringify(selected.query || {}, null, 2);
            let prettyBody = selected.body || '';
            try {
              const decoded = JSON.parse(selected.body);
              prettyBody = JSON.stringify(decoded, null, 2);
            } catch (e) { /* leave as-is */ }
            const respStatus = selected.response_status || 200;
            const requestTime = new Date(selected.time).toISOString();
            const ridSafe = (selected.rid || 'req').replace(/[^a-zA-Z0-9_-]/g,'');
          %>

          <div class="flex items-start justify-between gap-3">
            <h2 class="text-xl font-semibold">Request Details</h2>
            <div class="flex items-center gap-2">
              <span class="chip text-xs"><i class="fa-solid fa-signal"></i> <%= respStatus %></span>
              <span class="chip text-xs font-mono"><%= selected.method %></span>
            </div>
          </div>

          <div class="mt-3 grid md:grid-cols-2 gap-3">
            <!-- Meta -->
            <div class="border border-slate-200 rounded-xl p-3 bg-slate-50">
              <div class="grid grid-cols-[max-content,1fr] gap-x-4 gap-y-2 font-mono text-sm">
                <div class="text-slate-500">Time</div><div class="js-time" data-iso="<%= requestTime %>"><%= requestTime %></div>
                <div class="text-slate-500">IP</div><div><%= selected.ip %></div>
                <div class="text-slate-500">Method</div><div><%= selected.method %></div>
                <div class="text-slate-500">Response</div><div><%= respStatus %></div>
                <div class="text-slate-500">Full URL</div><div class="break-all"><%= selected.full_url %></div>
                <div class="text-slate-500">User-Agent</div><div class="break-all"><%= selected.user_agent %></div>
              </div>
            </div>

            <!-- Headers -->
            <div class="border border-slate-200 rounded-xl p-3 bg-slate-50 codecard">
              <div class="flex items-center justify-between">
                <div class="text-slate-500 text-sm">Headers</div>
                <button class="text-xs text-slate-600 px-2 py-1 rounded border border-slate-300 bg-white hover:bg-slate-100"
                        data-copy-target="hdr-<%= ridSafe %>"><i class="fa-regular fa-copy"></i> Copy</button>
              </div>
              <pre id="hdr-<%= ridSafe %>" class="whitespace-pre-wrap break-all font-mono text-sm mt-1"><%= prettyHeaders %></pre>
            </div>

            <!-- Query -->
            <div class="border border-slate-200 rounded-xl p-3 bg-slate-50 md:col-span-2 codecard">
              <div class="flex items-center justify-between">
                <div class="text-slate-500 text-sm">Query Params</div>
                <button class="text-xs text-slate-600 px-2 py-1 rounded border border-slate-300 bg-white hover:bg-slate-100"
                        data-copy-target="qry-<%= ridSafe %>"><i class="fa-regular fa-copy"></i> Copy</button>
              </div>
              <pre id="qry-<%= ridSafe %>" class="whitespace-pre-wrap break-all font-mono text-sm mt-1"><%= prettyQuery %></pre>
            </div>

            <!-- Body -->
            <div class="border border-slate-200 rounded-xl p-3 bg-slate-50 md:col-span-2 codecard">
              <div class="flex items-center justify-between">
                <div class="text-slate-500 text-sm">Body</div>
                <button class="text-xs text-slate-600 px-2 py-1 rounded border border-slate-300 bg-white hover:bg-slate-100"
                        data-copy-target="body-<%= ridSafe %>"><i class="fa-regular fa-copy"></i> Copy</button>
              </div>
              <pre id="body-<%= ridSafe %>" class="whitespace-pre-wrap break-all font-mono text-sm mt-1"><%= prettyBody %></pre>
            </div>
          </div>
        <% } %>
      </section>
    </div>
  </main>
</body>
<script src="/socket.io/socket.io.js"></script>
<script>
  (function(){
    try {
      const webhookRoom = '<%= webhookId %>';
      const socket = io();

      function setLiveConnected(yes){
        const liveDot = document.getElementById('live_dot');
        if(!liveDot) return;
        liveDot.classList.toggle('bg-emerald-500', yes);
        liveDot.classList.toggle('bg-red-500', !yes);
      }

      socket.on('connect', ()=>{ 
        console.info('Socket connected', socket.id); 
        try{ socket.emit('join', webhookRoom); console.info('Joining room', webhookRoom); }catch(e){}
        setLiveConnected(true); 
      });
      socket.on('disconnect', (reason)=>{ console.info('Socket disconnected', reason); setLiveConnected(false); });
      socket.on('reconnect', (n)=>{ try{ socket.emit('join', webhookRoom); }catch(e){} });

      function formatISO(iso){ try{ return new Date(iso).toISOString(); }catch(e){ return iso; } }

      function insertRequest(request){
        try{
          const container = document.querySelector('aside .overflow-auto.divide-y');
          if(!container) return;

          // If 'No requests yet.' exists, remove it
          const firstChild = container.firstElementChild;
          if(firstChild && firstChild.textContent && firstChild.textContent.includes('No requests yet.')){
            firstChild.remove();
          }

          const a = document.createElement('a');
          a.setAttribute('data-req-item','');
          a.setAttribute('data-path', request.path || request.full_url || '');
          a.setAttribute('data-method', request.method || '');
          a.setAttribute('data-status', request.response_status || '');
          a.href = '/request/' + encodeURIComponent('<%= webhookId %>') + '?rid=' + encodeURIComponent(request.rid);
          a.className = 'block px-4 py-3 hover:bg-slate-50 transition';

          const requestTime = formatISO(request.time || new Date());
          a.innerHTML = `
            <div class="flex items-center gap-2 text-sm">
              <span class="chip font-mono text-xs">${request.method || ''}</span>
              <span class="text-slate-500 font-mono text-xs js-time" data-iso="${requestTime}">${requestTime}</span>
              ${request.response_status ? `<span class="ml-auto inline-flex items-center gap-1 text-xs text-slate-500"><i class="fa-solid fa-signal"></i>${request.response_status}</span>` : ''}
            </div>
            <div class="font-mono text-slate-600 text-xs mt-1 break-all">${request.path || request.full_url || ''}</div>
          `;

          container.insertBefore(a, container.firstChild);

          // Re-run timestamp formatting for the new item
          try{ document.querySelectorAll('.js-time').forEach(span=>{ const iso = span.getAttribute('data-iso'); if(iso) span.textContent = new Date(iso).toLocaleString(); }); }catch(e){}

          // Update counter
          const rc = document.getElementById('reqCount');
          if(rc){ rc.textContent = String(Number(rc.textContent||0)+1); }
        }catch(e){ console.warn('insertRequest error', e); }
      }

      socket.on('request:new', (data)=>{ insertRequest(data || {}); const sel = document.querySelector('section'); if(sel){ sel.animate([{ boxShadow:'0 0 0px 0 rgba(34,197,94,0)' },{ boxShadow:'0 0 14px 6px rgba(34,197,94,.06)' },{ boxShadow:'0 0 0px 0 rgba(34,197,94,0)' }], { duration: 900 }); } });

      socket.on('request:updated', (data)=>{
        try{
          // Update any list item matching the rid by href query
          if(!data || !data.rid) return;
          const anchors = Array.from(document.querySelectorAll('[data-req-item]'));
          anchors.forEach(a=>{
            if(a.href && a.href.includes('rid=' + encodeURIComponent(data.rid))){
              // update status badge inside
              const badge = a.querySelector('.fa-signal') ? a.querySelector('.fa-signal').parentElement : null;
              if(badge && data.response_status){ badge.innerHTML = `<i class="fa-solid fa-signal"></i>${data.response_status}`; }
            }
          });
          // If the detailed view is open for this rid, refresh page fragment (simple approach: reload page)
          const selectedRid = '<%= selectedRid %>';
          if(selectedRid && data.rid === selectedRid){
            // Update response status chip in detail pane
            const chip = document.querySelector('section .chip');
            if(chip && data.response_status) chip.textContent = data.response_status;
          }
        }catch(e){ }
      });

    } catch (e) { console.warn('Live init failed', e); }
  })();
</script>

<!-- Loading indicator -->
<div id="loadingIndicator" class="loading-indicator">
  <i class="fa-spinner fa-spin"></i> Loading...
</div>

</html>
