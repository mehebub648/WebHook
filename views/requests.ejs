<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Requests for <%= webhookId %></title>
<link rel="icon" href="/favicon.svg?v=2" type="image/svg+xml" sizes="any" />
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
  <script>
    tailwind.config = {
      theme: {
        extend: {
          keyframes: {
            fadein: { '0%': {opacity:0, transform:'translateY(6px)'}, '100%': {opacity:1, transform:'translateY(0)'} },
            scalein: { '0%': {opacity:0, transform:'scale(.96)'}, '100%': {opacity:1, transform:'scale(1)'} },
          },
          animation: { fadein:'fadein .25s ease-out', scalein:'scalein .2s ease-out' },
          boxShadow: { soft: '0 2px 20px -4px rgba(2,6,23,.08)' }
        }
      }
    }
  </script>
  <style>
    .glass{backdrop-filter:blur(10px);background:rgba(255,255,255,.75)}
    .chip{display:inline-flex;align-items:center;gap:.375rem;padding:.25rem .5rem;border-radius:.5rem;border:1px solid rgb(203 213 225);background-color:rgb(248 250 252)}
    .codecard pre{max-height:40vh;overflow:auto}
  </style>
  <script>
    function showToast(msg){
      const t = document.createElement('div');
      t.className = 'fixed bottom-6 left-1/2 -translate-x-1/2 bg-slate-900 text-white px-4 py-2 rounded-lg shadow-lg animate-fadein z-50';
      t.textContent = msg;
      document.body.appendChild(t);
      setTimeout(()=>{ t.classList.add('opacity-0','transition','duration-300'); }, 1200);
      setTimeout(()=>{ t.remove(); }, 1600);
    }

    let currentSelectedRid = '<%= selectedRid %>';

    function formatISO(iso) {
      try { 
        return new Date(iso).toLocaleString(); 
      } catch(e) { 
        return iso; 
      }
    }

    async function loadRequestDetails(webhookId, rid) {
      try {
        // Show loading state
        const mainSection = document.querySelector('main section');
        if (mainSection) {
          mainSection.innerHTML = `
            <div class="flex items-center justify-center py-8">
              <div class="flex items-center gap-2 text-slate-600">
                <i class="fa-solid fa-spinner fa-spin"></i>
                Loading request details...
              </div>
            </div>
          `;
        }

        const response = await fetch(`/api/request/${encodeURIComponent(webhookId)}/${encodeURIComponent(rid)}`);
        if (!response.ok) {
          throw new Error(`Failed to load request details: ${response.status}`);
        }
        const data = await response.json();
        
        updateRequestDetailsView(data);
        currentSelectedRid = rid;
      } catch (error) {
        console.error('Error loading request details:', error);
        showToast('Failed to load request details');
        
        // Show error state
        const mainSection = document.querySelector('main section');
        if (mainSection) {
          mainSection.innerHTML = `
            <div class="border border-red-200 rounded-xl p-4 bg-red-50 text-red-700">
              <div class="flex items-center gap-2">
                <i class="fa-solid fa-exclamation-triangle"></i>
                Failed to load request details
              </div>
              <div class="text-sm mt-1 text-red-600">${error.message}</div>
            </div>
          `;
        }
      }
    }

  function updateRequestDetailsView(request) {
      const mainSection = document.querySelector('main section');
      if (!mainSection) return;

      const respStatus = request.response_status || 200;
      const requestTime = request.requestTime;
      const ridSafe = request.ridSafe;

      // Check if there's any forwarding information
      const hasForwardUrl = !!request.parsed_forward_url;
      const hasForwardResponse = !!(request.forward_response_status || request.forward_response_headers || request.forward_response_body);

      const forwardHeaders = request.prettyForwardHeaders || '{}';
      const forwardBody = request.prettyForwardBody || '';
      const fwdReqHeaders = request.prettyForwardRequestHeaders || '{}';
      const fwdReqBody = request.prettyForwardRequestBody || '';
      const forwardLink = request.parsed_forward_url || 'Not configured';
      const forwardLinkClass = hasForwardUrl ? 'text-blue-600' : 'text-slate-500';

      const forwardStatusValue = (typeof request.forward_response_status === 'number' || typeof request.forward_response_status === 'string')
        ? request.forward_response_status
        : 'No Response';

      const statusChip = hasForwardUrl
        ? (hasForwardResponse
          ? `<span class="chip text-xs"><i class="fa-solid fa-signal"></i> ${forwardStatusValue}</span>`
          : '<span class="chip text-xs bg-gray-100 text-gray-600 border-gray-200"><i class="fa-solid fa-clock"></i> Pending</span>')
        : '<span class="chip text-xs bg-gray-100 text-gray-600 border-gray-200"><i class="fa-solid fa-ban"></i> No Forwarding</span>';

      const modeChip = hasForwardUrl
        ? (request.background_forward
          ? '<span class="chip text-xs bg-orange-100 text-orange-700 border-orange-200"><i class="fa-solid fa-clock"></i> Background</span>'
          : '<span class="chip text-xs bg-green-100 text-green-700 border-green-200"><i class="fa-solid fa-sync"></i> Synchronous</span>')
        : '';

      const configChip = hasForwardUrl
        ? '<span class="chip text-xs bg-emerald-100 text-emerald-700 border-emerald-200"><i class="fa-solid fa-plug"></i> Configured</span>'
        : '<span class="chip text-xs bg-gray-100 text-gray-600 border-gray-200"><i class="fa-solid fa-plug"></i> Not Configured</span>';

      // Format timing information
      let timingInfo = '';
      if (request.forward_duration_ms !== undefined && request.forward_duration_ms !== null) {
        const duration = request.forward_duration_ms;
        const durationFormatted = duration < 1000 ? `${duration}ms` : `${(duration / 1000).toFixed(2)}s`;
        timingInfo = `<span class="chip text-xs bg-blue-100 text-blue-700 border-blue-200"><i class="fa-solid fa-stopwatch"></i> ${durationFormatted}</span>`;
      }

      // Format request/response timestamps
      let timestampInfo = '';
      if (request.forward_request_timestamp && request.forward_response_timestamp) {
        const reqTime = new Date(request.forward_request_timestamp).toLocaleString();
        const respTime = new Date(request.forward_response_timestamp).toLocaleString();
        timestampInfo = `
          <div class="border border-slate-200 rounded-xl p-3 bg-slate-50 md:col-span-2">
            <div class="text-slate-500 text-sm mb-2">Forwarding Timeline</div>
            <div class="grid grid-cols-[max-content,1fr] gap-x-4 gap-y-1 font-mono text-xs">
              <div class="text-slate-500">Request Sent:</div><div>${reqTime}</div>
              <div class="text-slate-500">Response Received:</div><div>${respTime}</div>
              ${request.forward_duration_ms ? `<div class="text-slate-500">Duration:</div><div>${request.forward_duration_ms < 1000 ? request.forward_duration_ms + 'ms' : (request.forward_duration_ms / 1000).toFixed(2) + 's'}</div>` : ''}
            </div>
          </div>
        `;
      }

      const forwardRequestHeadersContent = fwdReqHeaders || '{}';
      const forwardResponseHeadersContent = hasForwardResponse ? (forwardHeaders || '{}') : (request.background_forward
        ? 'Forwarding runs in background; response headers are not captured.'
        : 'No forwarding response headers captured yet');
      const forwardResponseBodyContent = hasForwardResponse ? (forwardBody || 'No forwarding response body captured') : (request.background_forward
        ? 'Forwarding runs in background; response body is not captured.'
        : 'No forwarding response body captured yet');

      let forwardingCard = `
        <div class="mt-6">
          <div class="flex items-start justify-between gap-3">
            <h2 class="text-xl font-semibold flex items-center gap-2">
              <i class="fa-solid fa-arrow-right text-blue-600"></i>
              Forwarding Details
            </h2>
            <div class="flex items-center gap-2 flex-wrap">
              ${configChip}
              ${modeChip}
              ${statusChip}
              ${timingInfo}
            </div>
          </div>

          <div class="mt-3 grid md:grid-cols-2 gap-3">
            <div class="border border-slate-200 rounded-xl p-3 bg-slate-50 md:col-span-2">
              <div class="text-slate-500 text-sm">Forwarding Configuration</div>
              <div class="grid grid-cols-[max-content,1fr] gap-x-4 gap-y-1 font-mono text-sm mt-2">
                <div class="text-slate-500">Target URL:</div><div class="font-mono text-sm break-all ${forwardLinkClass}">${forwardLink}</div>
                ${request.forward_request_method ? `<div class="text-slate-500">Method:</div><div class="font-semibold">${request.forward_request_method}</div>` : ''}
                ${request.forward_request_url ? `<div class="text-slate-500">Actual URL:</div><div class="font-mono text-xs break-all text-blue-600">${request.forward_request_url}</div>` : ''}
                <div class="text-slate-500">Mode:</div><div>${request.background_forward ? 
                  '<span class="inline-flex items-center gap-1 px-2 py-1 rounded bg-orange-50 text-orange-700 border border-orange-100 font-medium text-xs"><i class="fa-solid fa-clock"></i>Background</span>' : 
                  '<span class="inline-flex items-center gap-1 px-2 py-1 rounded bg-green-50 text-green-700 border border-green-100 font-medium text-xs"><i class="fa-solid fa-sync"></i>Synchronous</span>'}</div>
                <div class="text-slate-500">Status:</div><div>${statusChip}</div>
                ${timingInfo ? `<div class="text-slate-500">Duration:</div><div>${timingInfo}</div>` : ''}
              </div>
            </div>

            ${timestampInfo}

            <div class="border border-slate-200 rounded-xl p-3 bg-slate-50 codecard md:col-span-2">
              <div class="flex items-center justify-between">
                <h4 class="text-sm font-medium text-slate-700">Forwarding Request Headers</h4>
                <button class="text-xs text-slate-600 px-2 py-1 rounded border border-slate-300 bg-white hover:bg-slate-100" data-copy-target="fwd-req-hdr-${ridSafe}"><i class="fa-regular fa-copy"></i> Copy</button>
              </div>
              <pre id="fwd-req-hdr-${ridSafe}" class="whitespace-pre-wrap break-all font-mono text-sm mt-2">${forwardRequestHeadersContent}</pre>
            </div>

            ${
              fwdReqBody
                ? `<div class="border border-slate-200 rounded-xl p-3 bg-slate-50 codecard md:col-span-2">
                    <div class="flex items-center justify-between">
                      <h4 class="text-sm font-medium text-slate-700">Forwarding Request Body</h4>
                      <button class="text-xs text-slate-600 px-2 py-1 rounded border border-slate-300 bg-white hover:bg-slate-100" data-copy-target="fwd-req-body-${ridSafe}"><i class="fa-regular fa-copy"></i> Copy</button>
                    </div>
                    <pre id="fwd-req-body-${ridSafe}" class="whitespace-pre-wrap break-all font-mono text-sm mt-2">${fwdReqBody}</pre>
                  </div>`
                : ''
            }

            <div class="border border-slate-200 rounded-xl p-3 bg-blue-50 codecard md:col-span-2">
              <div class="flex items-center justify-between">
                <h4 class="text-sm font-medium text-slate-700">Forwarding Response Headers</h4>
                <button class="text-xs text-slate-600 px-2 py-1 rounded border border-slate-300 bg-white hover:bg-slate-100" data-copy-target="fwd-hdr-${ridSafe}"><i class="fa-regular fa-copy"></i> Copy</button>
              </div>
              <pre id="fwd-hdr-${ridSafe}" class="whitespace-pre-wrap break-all font-mono text-sm mt-2">${forwardResponseHeadersContent}</pre>
            </div>

            <div class="border border-slate-200 rounded-xl p-3 bg-blue-50 codecard md:col-span-2">
              <div class="flex items-center justify-between">
                <h4 class="text-sm font-medium text-slate-700">Forwarding Response Body</h4>
                <button class="text-xs text-slate-600 px-2 py-1 rounded border border-slate-300 bg-white hover:bg-slate-100" data-copy-target="fwd-body-${ridSafe}"><i class="fa-regular fa-copy"></i> Copy</button>
              </div>
              <pre id="fwd-body-${ridSafe}" class="whitespace-pre-wrap break-all font-mono text-sm mt-2">${forwardResponseBodyContent}</pre>
            </div>
          </div>
        </div>
      `;

      let tagSection = '';
      if (request.tag) {
        tagSection = `
          <div class="text-slate-500">Tag</div>
          <div class="inline-flex items-center gap-1 px-2 py-1 rounded bg-yellow-50 text-yellow-700 border border-yellow-100 font-medium">
            <i class="fa-solid fa-tag"></i>${request.tag}
          </div>
        `;
      }

      let forwardUrlSection = '';
      if (request.parsed_forward_url) {
        forwardUrlSection = `
          <div class="text-slate-500">Forward URL</div><div class="break-all text-blue-600">${request.parsed_forward_url}</div>
          <div class="text-slate-500">Forward Mode</div>
          ${request.background_forward ? 
            '<div class="inline-flex items-center gap-1 px-2 py-1 rounded bg-orange-50 text-orange-700 border border-orange-100 font-medium"><i class="fa-solid fa-clock"></i>Background</div>' : 
            '<div class="inline-flex items-center gap-1 px-2 py-1 rounded bg-green-50 text-green-700 border border-green-100 font-medium"><i class="fa-solid fa-sync"></i>Synchronous</div>'}
        `;
      }

      mainSection.innerHTML = `
        <div class="flex items-start justify-between gap-3">
          <h2 class="text-xl font-semibold">Request Details</h2>
          <div class="flex items-center gap-2">
            <span class="chip text-xs"><i class="fa-solid fa-signal"></i> ${respStatus}</span>
            <span class="chip text-xs font-mono">${request.method}</span>
          </div>
        </div>

        <div class="mt-3 grid md:grid-cols-2 gap-3">
          <!-- Meta -->
          <div class="border border-slate-200 rounded-xl p-3 bg-slate-50">
            <div class="text-slate-500 text-sm mb-2">Request Information</div>
            <div class="grid grid-cols-[max-content,1fr] gap-x-4 gap-y-2 font-mono text-sm">
              <div class="text-slate-500">Time</div><div>${formatISO(requestTime)}</div>
              <div class="text-slate-500">IP Address</div><div>${request.ip}</div>
              <div class="text-slate-500">Method</div><div class="font-semibold">${request.method}</div>
              <div class="text-slate-500">Response Status</div><div class="font-semibold">${respStatus}</div>
              ${request.proxied_status ? `<div class="text-slate-500">Proxied Status</div><div class="font-semibold text-blue-600">${request.proxied_status}</div>` : ''}
              <div class="text-slate-500">Full URL</div><div class="break-all">${request.full_url}</div>
              <div class="text-slate-500">Path</div><div class="break-all font-medium">${request.path || 'N/A'}</div>
              <div class="text-slate-500">User-Agent</div><div class="break-all">${request.user_agent}</div>
              <div class="text-slate-500">Tag</div>
              <div class="inline-flex items-center gap-1 px-2 py-1 rounded border font-medium ${request.tag ? 'bg-yellow-50 text-yellow-700 border-yellow-100' : 'bg-slate-100 text-slate-600 border-slate-200'}">
                <i class="fa-solid fa-tag"></i>${(request.tag === null || typeof request.tag === 'undefined' || request.tag === '') ? 'null' : request.tag}
              </div>
            </div>
          </div>

          <!-- Response Configuration -->
          <div class="border border-slate-200 rounded-xl p-3 bg-slate-50">
            <div class="text-slate-500 text-sm mb-2">Response Configuration</div>
            <div class="grid grid-cols-[max-content,1fr] gap-x-4 gap-y-2 font-mono text-sm">
              ${request.parsed_response_status ? `<div class="text-slate-500">Parsed Status</div><div>${request.parsed_response_status}</div>` : ''}
              ${request.parsed_response_type ? `<div class="text-slate-500">Response Type</div><div class="font-medium">${request.parsed_response_type}</div>` : ''}
              ${request.full_body !== undefined ? `<div class="text-slate-500">Full Body</div><div class="inline-flex items-center gap-1 px-2 py-1 rounded border ${request.full_body ? 'bg-green-50 text-green-700 border-green-100' : 'bg-gray-50 text-gray-700 border-gray-100'}"><i class="fa-solid fa-${request.full_body ? 'check' : 'times'}"></i>${request.full_body ? 'Enabled' : 'Disabled'}</div>` : ''}
              ${request._id ? `<div class="text-slate-500">Database ID</div><div class="text-xs break-all">${typeof request._id === 'object' && request._id.$oid ? request._id.$oid : request._id}</div>` : ''}
              ${request.rid ? `<div class="text-slate-500">Request ID</div><div class="text-xs break-all">${request.rid}</div>` : ''}
              ${request.__v !== undefined ? `<div class="text-slate-500">Version</div><div>${request.__v}</div>` : ''}
            </div>
          </div>

          <!-- Headers -->
          <div class="border border-slate-200 rounded-xl p-3 bg-slate-50 codecard">
            <div class="flex items-center justify-between">
              <div class="text-slate-500 text-sm">Headers</div>
              <button class="text-xs text-slate-600 px-2 py-1 rounded border border-slate-300 bg-white hover:bg-slate-100"
                      data-copy-target="hdr-${ridSafe}"><i class="fa-regular fa-copy"></i> Copy</button>
            </div>
            <pre id="hdr-${ridSafe}" class="whitespace-pre-wrap break-all font-mono text-sm mt-1">${request.prettyHeaders}</pre>
          </div>

          <!-- Query -->
          <div class="border border-slate-200 rounded-xl p-3 bg-slate-50 md:col-span-2 codecard">
            <div class="flex items-center justify-between">
              <div class="text-slate-500 text-sm">Query Parameters</div>
              <button class="text-xs text-slate-600 px-2 py-1 rounded border border-slate-300 bg-white hover:bg-slate-100"
                      data-copy-target="qry-${ridSafe}"><i class="fa-regular fa-copy"></i> Copy</button>
            </div>
            <pre id="qry-${ridSafe}" class="whitespace-pre-wrap break-all font-mono text-sm mt-1">${request.prettyQuery}</pre>
          </div>

          <!-- Body -->
          <div class="border border-slate-200 rounded-xl p-3 bg-slate-50 md:col-span-2 codecard">
            <div class="flex items-center justify-between">
              <div class="text-slate-500 text-sm">Request Body</div>
              <button class="text-xs text-slate-600 px-2 py-1 rounded border border-slate-300 bg-white hover:bg-slate-100"
                      data-copy-target="body-${ridSafe}"><i class="fa-regular fa-copy"></i> Copy</button>
            </div>
            <pre id="body-${ridSafe}" class="whitespace-pre-wrap break-all font-mono text-sm mt-1">${request.prettyBody}</pre>
          </div>
        </div>

        ${forwardingCard}
      `;

      // Re-attach copy button event listeners
      attachCopyEventListeners();
    }

    function attachCopyEventListeners() {
      document.querySelectorAll('[data-copy-target]').forEach(btn=>{
        btn.addEventListener('click', ()=>{
          const pre = document.getElementById(btn.getAttribute('data-copy-target'));
          if(!pre) return;
          const text = pre.textContent || pre.innerText || '';
          navigator.clipboard.writeText(text).then(()=> showToast('Copied'));
        });
      });
    }

    document.addEventListener('DOMContentLoaded', function(){
      // Render full origin URL for the webhook
      const origin = window.location.origin.replace(/\/$/, '');
      const el = document.getElementById('fullWebhook');
      if (el && el.dataset.rel) el.textContent = origin + '/' + el.dataset.rel.replace(/^\//,'');

      document.getElementById('copyWebhook')?.addEventListener('click', function(){
        if (el) navigator.clipboard.writeText(el.textContent).then(()=> showToast('Copied URL'));
      });

      // Locale-format all timestamps
      document.querySelectorAll('.js-time').forEach(span=>{
        const iso = span.getAttribute('data-iso');
        if(iso){
          try{ span.textContent = new Date(iso).toLocaleString(); }catch(_){}
        }
      });

      // Copy buttons for code blocks
      attachCopyEventListeners();

      // Load initial request details if selectedRid is provided
      const initialRid = currentSelectedRid;
      if (initialRid) {
        const webhookId = '<%= webhookId %>';
        // Find and mark the active request item
        const activeItem = document.querySelector(`[href*="rid=${encodeURIComponent(initialRid)}"]`);
        if (activeItem) {
          activeItem.classList.add('!bg-slate-50');
        }
        // Load the request details
        loadRequestDetails(webhookId, initialRid);
      }

      // Handle request selection clicks
      document.addEventListener('click', function(e) {
        const requestItem = e.target.closest('[data-req-item]');
        if (!requestItem) return;
        
        e.preventDefault();
        
        // Extract webhook ID and request ID from href
        const href = requestItem.getAttribute('href');
        const match = href.match(/\/request\/([^?]+)\?rid=(.+)/);
        if (!match) return;
        
        const webhookId = decodeURIComponent(match[1]);
        const rid = decodeURIComponent(match[2]);
        
        // Update URL without page reload
        window.history.pushState({}, '', href);
        
        // Update active state
        document.querySelectorAll('[data-req-item]').forEach(item => {
          item.classList.remove('bg-slate-50', '!bg-slate-50');
        });
        requestItem.classList.add('!bg-slate-50');
        
        // Load request details
        loadRequestDetails(webhookId, rid);
      });

      // Filter in sidebar
      const filter = document.getElementById('reqFilter');
      const items = Array.from(document.querySelectorAll('[data-req-item]'));
      filter?.addEventListener('input', ()=>{
        const q = filter.value.toLowerCase().trim();
        let visible = 0;
        items.forEach(a=>{
          const hay = (a.getAttribute('data-path')+' '+a.getAttribute('data-method')+' '+a.getAttribute('data-status')).toLowerCase();
          const match = !q || hay.includes(q);
          a.classList.toggle('hidden', !match);
          if(match) visible++;
        });
        document.getElementById('reqCount').textContent = String(visible);
      });

      // Ensure active item is visible
      const active = document.querySelector('[data-req-item].bg-slate-50, [data-req-item].\\!bg-slate-50');
      if(active){
        active.scrollIntoView({ block:'nearest' });
      }
    });
  </script>
</head>
<body class="min-h-screen bg-gradient-to-br from-slate-50 via-white to-emerald-50 text-slate-900">
  <header class="glass border-b border-slate-200/70">
    <div class="max-w-6xl mx-auto px-4 py-6 flex items-center justify-between">
      <div class="flex items-center gap-3">
        <div class="size-10 rounded-xl bg-slate-900 text-white grid place-items-center"><i class="fa-solid fa-list"></i></div>
        <div>
          <h1 class="text-xl md:text-2xl font-semibold">Requests</h1>
          <div class="text-slate-600 text-sm">
            for <code class="font-mono text-slate-800"><%= webhookId %></code>
            <span id="live_indicator" title="Live updates" class="inline-flex items-center gap-2 ml-3 text-xs text-emerald-600">
              <span id="live_dot" class="w-2 h-2 rounded-full bg-emerald-500 animate-pulse"></span> Live
            </span>
          </div>
        </div>
      </div>
      <a class="inline-flex items-center gap-2 bg-sky-600 hover:bg-sky-500 text-white font-medium px-3 py-2 rounded-lg shadow-sm transition" href="/">
        <i class="fa-solid fa-arrow-left"></i> Back to Index
      </a>
    </div>
  </header>

  <main class="max-w-6xl mx-auto px-4 py-6">
    <div class="grid grid-cols-1 md:grid-cols-[340px,1fr] gap-4">
      <!-- Sidebar -->
      <aside class="md:sticky md:top-6 bg-white border border-slate-200 rounded-2xl overflow-hidden shadow-soft h-fit">
        <div class="px-4 py-4 border-b border-slate-200">
          <div class="text-sm text-slate-600">Webhook</div>
          <div class="mt-1 font-mono text-sky-700 break-all flex items-center gap-2">
            <i class="fa-solid fa-link"></i>
            <a href="/webhook/<%= encodeURIComponent(webhookId) %>" class="hover:underline" title="Open webhook">
              <span id="fullWebhook" data-rel="webhook/<%= encodeURIComponent(webhookId) %>">webhook/<%= webhookId %></span>
            </a>
            <button id="copyWebhook" type="button" class="text-slate-500 hover:text-slate-700 size-7 grid place-items-center rounded-md hover:bg-slate-100" title="Copy full URL">
              <i class="fa-regular fa-copy"></i>
            </button>
          </div>

          <% if (webhook && webhook.label) { %>
            <div class="mt-2 text-xs text-slate-600">
              Label: <span class="inline-flex items-center gap-1 px-1.5 py-0.5 rounded bg-emerald-50 text-emerald-700 border border-emerald-100 font-medium"><%= webhook.label %></span>
            </div>
          <% } %>

          <% if (typeof requests !== 'undefined' && requests.length > 0 && requests[0] && requests[0].webhook_id) { %>
            <% // Try to get tags from the first request's stored webhook data if available (best-effort) %>
          <% } %>

          <!-- Filter -->
          <div class="mt-3">
            <label class="text-xs text-slate-600 mb-1 block">Filter</label>
            <div class="flex bg-white border border-slate-300 rounded-lg overflow-hidden">
              <input id="reqFilter" type="text" placeholder="method, status, path…"
                     class="w-full bg-transparent px-3 py-2 text-sm focus:outline-none" />
              <div class="px-3 grid place-items-center text-slate-500 border-l border-slate-300">
                <i class="fa-solid fa-magnifying-glass"></i>
              </div>
            </div>
            <div class="mt-1 text-xs text-slate-500">
              <span id="reqCount"><%= requests.length %></span> request<%= requests.length===1?'':'s' %>
            </div>
          </div>
        </div>

        <div class="max-h-[70vh] overflow-auto divide-y divide-slate-100">
          <% if (requests.length === 0) { %>
            <div class="px-4 py-6 text-slate-600">No requests yet.</div>
          <% } else { %>
            <% requests.forEach(request => { 
              const active = (request.rid === selectedRid);
              const requestTime = new Date(request.time).toISOString();
            %>
              <a data-req-item
                 data-path="<%= (request.path || request.full_url || '') %>"
                 data-method="<%= request.method || 'N/A' %>"
                 data-status="<%= request.response_status || '' %>"
                 class="block px-4 py-3 hover:bg-slate-50 transition <%= active ? '!bg-slate-50' : '' %>" 
                 href="/request/<%= encodeURIComponent(webhookId) %>?rid=<%= encodeURIComponent(request.rid) %>">
                <div class="flex items-center gap-2 text-sm">
                  <span class="chip font-mono text-xs"><%= request.method || 'N/A' %></span>
                  <span class="text-slate-500 font-mono text-xs js-time" data-iso="<%= requestTime %>"><%= requestTime %></span>
                  <% if (request.response_status) { %>
                    <span class="ml-auto inline-flex items-center gap-1 text-xs text-slate-500">
                      <i class="fa-solid fa-signal"></i><%= request.response_status %>
                    </span>
                  <% } %>
                  <% if (request.forward_response_status) { %>
                    <% if (request.background_forward) { %>
                      <span class="inline-flex items-center gap-1 text-xs text-orange-600" title="Background Forward">
                        <i class="fa-solid fa-arrow-right"></i><%= request.forward_response_status %>
                        <i class="fa-solid fa-clock text-orange-500" title="Background"></i>
                      </span>
                    <% } else { %>
                      <span class="inline-flex items-center gap-1 text-xs text-blue-600" title="Synchronous Forward">
                        <i class="fa-solid fa-arrow-right"></i><%= request.forward_response_status %>
                      </span>
                    <% } %>
                  <% } %>
                </div>
                <div class="font-mono text-slate-600 text-xs mt-1 break-all"><%= request.path || request.full_url || 'N/A' %></div>
                <% if (request.tag) { %>
                  <div class="mt-1">
                    <span class="inline-flex items-center gap-1 px-1.5 py-0.5 rounded bg-yellow-50 text-yellow-600 border border-yellow-100 text-xs">
                      <i class="fa-solid fa-tag"></i><%= request.tag %>
                    </span>
                  </div>
                <% } %>
              </a>
            <% }); %>
          <% } %>
        </div>
      </aside>

      <!-- Main -->
      <section class="bg-white border border-slate-200 rounded-2xl p-5 shadow-soft">
        <div class="border border-slate-200 rounded-xl p-4 bg-slate-50 text-slate-600">
          <div class="flex items-center gap-2">
            <i class="fa-solid fa-mouse-pointer"></i>
            Select a request from the left to view details.
          </div>
        </div>
      </section>
    </div>
  </main>
</body>
<script src="/socket.io/socket.io.js"></script>
<script>
  (function(){
    try {
      const webhookRoom = '<%= webhookId %>';
      const socket = io();

      function setLiveConnected(yes){
        const liveDot = document.getElementById('live_dot');
        if(!liveDot) return;
        liveDot.classList.toggle('bg-emerald-500', yes);
        liveDot.classList.toggle('bg-red-500', !yes);
      }

      socket.on('connect', ()=>{ 
        console.info('Socket connected', socket.id); 
        try{ socket.emit('join', webhookRoom); console.info('Joining room', webhookRoom); }catch(e){}
        setLiveConnected(true); 
      });
      socket.on('disconnect', (reason)=>{ console.info('Socket disconnected', reason); setLiveConnected(false); });
      socket.on('reconnect', (n)=>{ try{ socket.emit('join', webhookRoom); }catch(e){} });

      function formatISO(iso){ try{ return new Date(iso).toISOString(); }catch(e){ return iso; } }

      function insertRequest(request){
        try{
          const container = document.querySelector('aside .overflow-auto.divide-y');
          if(!container) return;

          // If 'No requests yet.' exists, remove it
          const firstChild = container.firstElementChild;
          if(firstChild && firstChild.textContent && firstChild.textContent.includes('No requests yet.')){
            firstChild.remove();
          }

          const a = document.createElement('a');
          a.setAttribute('data-req-item','');
          a.setAttribute('data-path', request.path || request.full_url || '');
          a.setAttribute('data-method', request.method || '');
          a.setAttribute('data-status', request.response_status || '');
          a.href = '/request/' + encodeURIComponent('<%= webhookId %>') + '?rid=' + encodeURIComponent(request.rid);
          a.className = 'block px-4 py-3 hover:bg-slate-50 transition';

          const requestTime = formatISO(request.time || new Date());
          
          let tagHtml = '';
          if (request.tag) {
            tagHtml = `
              <div class="mt-1">
                <span class="inline-flex items-center gap-1 px-1.5 py-0.5 rounded bg-yellow-50 text-yellow-600 border border-yellow-100 text-xs">
                  <i class="fa-solid fa-tag"></i>${request.tag}
                </span>
              </div>
            `;
          }
          
          a.innerHTML = `
            <div class="flex items-center gap-2 text-sm">
              <span class="chip font-mono text-xs">${request.method}</span>
              <span class="text-slate-500 font-mono text-xs js-time" data-iso="${requestTime}">${requestTime}</span>
              ${request.response_status ? `<span class="ml-auto inline-flex items-center gap-1 text-xs text-slate-500"><i class="fa-solid fa-signal"></i>${request.response_status}</span>` : ''}
              ${request.forward_response_status ? 
                (request.background_forward ? 
                  `<span class="inline-flex items-center gap-1 text-xs text-orange-600" title="Background Forward"><i class="fa-solid fa-arrow-right"></i>${request.forward_response_status}<i class="fa-solid fa-clock text-orange-500" title="Background"></i></span>` : 
                  `<span class="inline-flex items-center gap-1 text-xs text-blue-600" title="Synchronous Forward"><i class="fa-solid fa-arrow-right"></i>${request.forward_response_status}</span>`
                ) : ''}
            </div>
            <div class="font-mono text-slate-600 text-xs mt-1 break-all">${request.path || request.full_url}</div>
            ${tagHtml}
          `;

          container.insertBefore(a, container.firstChild);

          // Re-run timestamp formatting for the new item
          try{ document.querySelectorAll('.js-time').forEach(span=>{ const iso = span.getAttribute('data-iso'); if(iso) span.textContent = new Date(iso).toLocaleString(); }); }catch(e){}

          // Update counter
          const rc = document.getElementById('reqCount');
          if(rc){ rc.textContent = String(Number(rc.textContent||0)+1); }
        }catch(e){ console.warn('insertRequest error', e); }
      }

      socket.on('request:new', (data)=>{ insertRequest(data || {}); const sel = document.querySelector('section'); if(sel){ sel.animate([{ boxShadow:'0 0 0px 0 rgba(34,197,94,0)' },{ boxShadow:'0 0 14px 6px rgba(34,197,94,.06)' },{ boxShadow:'0 0 0px 0 rgba(34,197,94,0)' }], { duration: 900 }); } });

      socket.on('request:updated', (data)=>{
        try{
          // Update any list item matching the rid by href query
          if(!data || !data.rid) return;
          const anchors = Array.from(document.querySelectorAll('[data-req-item]'));
          anchors.forEach(a=>{
            if(a.href && a.href.includes('rid=' + encodeURIComponent(data.rid))){
              // update status badge inside
              const badge = a.querySelector('.fa-signal') ? a.querySelector('.fa-signal').parentElement : null;
              if(badge && data.response_status){ badge.innerHTML = `<i class="fa-solid fa-signal"></i>${data.response_status}`; }
            }
          });
          // If the detailed view is open for this rid, refresh page fragment (simple approach: reload page)
          const selectedRid = '<%= selectedRid %>';
          if(selectedRid && data.rid === selectedRid){
            // Update response status chip in detail pane
            const chip = document.querySelector('section .chip');
            if(chip && data.response_status) chip.textContent = data.response_status;
          }
        }catch(e){ }
      });

    } catch (e) { console.warn('Live init failed', e); }
  })();
</script>
</html>

